The ``2-matrix_divided`` module
============================

Using ``matrix_divided``
---------------------

Import module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test one element:
    >>> matrix_divided([[2]], 2)
    [[1.0]]

Test passed matrix is unmodified:
    >>> m = [[2, 4, 8], [1, 2, 3]]
    >>> matrix_divided(m, 2)
    [[1.0, 2.0, 4.0], [0.5, 1.0, 1.5]]
    >>> m[1][1]
    2

Test correct int matrix and int div:
     >>> matrix_divided([[2, 4, 6], [8, 10, 12]], 2)
     [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Test correct float matrix and int div:
    >>> matrix_divided([[2.2, 4.4, 6.6], [8.8, 10.10, 12.12]], 2)
    [[1.1, 2.2, 3.3], [4.4, 5.05, 6.06]]

Test correct float matrix and float div:
    >>> matrix_divided([[2.2, 4.4, 6.6], [8.8, 10.10, 12.12]], 2.2)
    [[1.0, 2.0, 3.0], [4.0, 4.59, 5.51]]

Test correct int and float matrix and int div:
    >>> matrix_divided([[2.2, 4.4, 6.6], [8, 10, 12]], 2)
    [[1.1, 2.2, 3.3], [4.0, 5.0, 6.0]]

Test correct int and float matrix and float div:
    >>> matrix_divided([[2.2, 4.4, 6.6], [8, 10, 12]], 2.2)
    [[1.0, 2.0, 3.0], [3.64, 4.55, 5.45]]

Test incorrect length of lists:
    >>> matrix_divided([[2, 4, 6], [8, 10]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test for matrix is not a list:
    >>> matrix_divided("laila", 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for matrix is empty:
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for matrix is list of empty list:
    >>> matrix_divided([[]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for matrix of list of a non lists:
    >>> matrix_divided(["laila", 1, "hi"], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for matrix is None:
    >>> matrix_divided(None, 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for matrix if not int or floats:
    >>> matrix_divided([["laila", 1, 1.4], [[1, 2], "k", True]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for div equal zero:
    >>> matrix_divided([[2, 4, 6], [8, 10]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Test for div not int or float:
    >>> matrix_divided([[2, 4, 6], [8, 10, 12]], "hi")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Test for div is None :
    >>> matrix_divided([[2, 4, 6], [8, 10, 12]], None)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Test for div is infinity :
    >>> matrix_divided([[2, 4, 6], [8, 10, 12]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Test for div is negative:
     >>> matrix_divided([[2, 4, 6], [8, 10, 12]], -2)
     [[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]

Test for div is nan :
    >>> matrix_divided([[2, 4, 6], [8, 10, 12]], float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]

Test missing arguments:
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'














